{"version":3,"file":"index.mjs","sources":["../lib/debug.js","../lib/decode.js","../lib/main.js","../lib/validate.js","../lib/object_mode.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'split-stream' );\n\n\n// EXPORTS //\n\nexport default debug;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport string2buffer from '@stdlib/buffer-from-string';\n\n\n// MAIN //\n\n/**\n* Re-decodes a UTF-8 string according to a specified encoding.\n*\n* @private\n* @param {string} str - UTF-8 string to decode\n* @param {string} enc - string encoding\n* @returns {string} decoded string\n*/\nfunction decode( str, enc ) {\n\t// Check if we need to re-decode the string to something other than 'utf8'...\n\tif ( enc === 'utf8' || enc === 'buffer' ) {\n\t\treturn str;\n\t}\n\tstr = string2buffer( str );\n\tif ( enc ) {\n\t\treturn str.toString( enc );\n\t}\n\treturn str.toString();\n}\n\n\n// EXPORTS //\n\nexport default decode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Transform = require( 'readable-stream' ).Transform;\nimport assign from '@stdlib/object-assign';\nimport inherit from '@stdlib/utils-inherit';\nimport setNonEnumerable from '@stdlib/utils-define-nonenumerable-property';\nimport setNonEnumerableReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport Buffer from '@stdlib/buffer-ctor';\nimport nextTick from '@stdlib/utils-next-tick';\nimport DEFAULTS from './defaults.json';\nimport validate from './validate.js';\nimport debug from './debug.js';\nimport decode from './decode.js';\n\n\n// VARIABLES //\n\nvar RE = /\\r?\\n/;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nfunction transform( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar splits;\n\tvar split;\n\tvar len;\n\tvar i;\n\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tif ( encoding === 'buffer' ) {\n\t\t// Default Buffer decoding is 'utf8':\n\t\tchunk = chunk.toString();\n\t}\n\telse if ( encoding !== 'utf8' ) {\n\t\t// Decode the chunk as a 'utf8' string...\n\t\tchunk = new Buffer( chunk, encoding );\n\t\tchunk = chunk.toString( 'utf8' );\n\t}\n\t// Split the chunk:\n\tsplits = chunk.split( this._sep );\n\tdebug( 'Splits: %s. Index: %d.', JSON.stringify( splits ), this._idx );\n\n\t// How many splits do we have? We do not count the last \"split\", as it may be incomplete...\n\tlen = splits.length - 1;\n\tdebug( '%s splits. Index: %d.', len, this._idx );\n\n\t// If we do not have any splits, add the chunk to the buffer and wait for more data...\n\tif ( len === 0 ) {\n\t\tdebug( 'No splits. Index: %d.', this._idx );\n\t\tthis._buffer += splits[ len ];\n\t}\n\t// If we have split data, concat any previous partial split, re-decode (if need be) each split according to its original encoding, push each split to the destination, and set anything leftover as the new split buffer...\n\telse {\n\t\tdebug( 'Processing splits. Index: %d.', this._index );\n\t\tsplit = this._buffer + splits[ 0 ];\n\t\tsplit = decode( split, encoding );\n\n\t\tdebug( 'Split %d: %s. Index: %d.', 0, split.toString(), this._idx );\n\t\tthis.push( split, encoding );\n\t\tfor ( i = 1; i < len; i++ ) {\n\t\t\tsplit = decode( splits[ i ], encoding );\n\t\t\tdebug( 'Split %d: %s. Index: %d.', i, split.toString(), this._idx );\n\t\t\tthis.push( split, encoding );\n\t\t}\n\t\tdebug( 'Remaining split: %s.', splits[len].toString() );\n\t\tthis._buffer = splits[ len ];\n\t}\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nfunction flush( clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar split = this._buffer;\n\tif ( split ) {\n\t\tdebug( 'Processing final split...' );\n\t\tsplit = decode( split, this._encoding );\n\t\tthis.push( split, this._encoding );\n\t}\n\tdebug( 'Flushing the stream...' );\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Split stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = new SplitStream();\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n*/\nfunction SplitStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof SplitStream ) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new SplitStream( options );\n\t\t}\n\t\treturn new SplitStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// The stream's readable state should always be in object mode to prevent split data from being buffered (concatenated) and no longer being separated...\n\topts.readableObjectMode = true;\n\n\t// The stream converts each chunk into a string so no need to encode strings written to the split stream as Buffer objects:\n\topts.decodeStrings = false;\n\n\t// Make the stream a Transform stream:\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tTransform.call( this, opts );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', ( opts.sep === null ) ? RE : opts.sep );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache the encoding:\n\tsetNonEnumerableReadOnly( this, '_encoding', opts.encoding );\n\n\t// Buffer for storing partial splits:\n\tsetNonEnumerable( this, '_buffer', '' );\n\n\t// Chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Transform` prototype.\n*/\ninherit( SplitStream, Transform );\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @name _transform\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_transform', transform );\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @name _flush\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_flush', flush );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nexport default SplitStream;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNonNegative } from '@stdlib/assert-is-nonnegative-number';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isRegExp from '@stdlib/assert-is-regexp';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(string|RegExp)} [options.sep] - separator used to split streamed data\n* @param {boolean} [options.objectMode] - specifies whether stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode] - specifies whether the writable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '\\t',\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1MR2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif (\n\t\t\t!isString( opts.sep ) &&\n\t\t\t!isRegExp( opts.sep )\n\t\t) {\n\t\t\treturn new TypeError( format( '1MRAB', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( '1MR2o', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'writableObjectMode' ) ) {\n\t\topts.writableObjectMode = options.writableObjectMode;\n\t\tif ( !isBoolean( opts.writableObjectMode ) ) {\n\t\t\treturn new TypeError( format( '1MR2o', 'writableObjectMode', opts.writableObjectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) ) {\n\t\t\treturn new TypeError( format( '1MR2W', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( format( '1MR2o', 'allowHalfOpen', opts.allowHalfOpen ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( '1MR4k', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport assign from '@stdlib/object-assign';\nimport Stream from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns a stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = objectMode({\n*     'sep': ','\n* });\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '1MR2V', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts );\n}\n\n\n// EXPORTS //\n\nexport default objectMode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport assign from '@stdlib/object-assign';\nimport Stream from './main.js';\n\n\n// MAIN //\n\n/**\n* Creates a reusable stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8'\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '1MR2V', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn splitStream;\n\n\t/**\n\t* Creates a transform stream for splitting streamed data.\n\t*\n\t* @private\n\t* @throws {TypeError} must provide valid options\n\t* @returns {SplitStream} split stream\n\t*/\n\tfunction splitStream() {\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default streamFactory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream which splits streamed data.\n*\n* @module @stdlib/streams-node-split\n*\n* @example\n* import stdout from '@stdlib/streams-node-stdout';\n* import splitStream from '@stdlib/streams-node-split';\n*\n* var stream = splitStream();\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n* // => '1' => '2' => '3'\n*\n* @example\n* import splitStream from '@stdlib/streams-node-split';\n*\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var factory = splitStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*\n* @example\n* import stdout from '@stdlib/streams-node-stdout';\n* import splitStream from '@stdlib/streams-node-split';\n*\n* var stream = splitStream.objectMode({\n*     'sep': ','\n* });\n*\n* stream.pipe( stdout );\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n* // => 'a' => 'b' => 'c'\n*/\n\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport objectMode from './object_mode.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["debug","logger","decode","str","enc","string2buffer","toString","Transform","require$$0","RE","SplitStream","options","opts","err","this","arguments","length","assign","DEFAULTS","isObject","hasOwnProp","sep","isString","isRegExp","objectMode","isBoolean","TypeError","format","writableObjectMode","encoding","allowHalfOpen","highWaterMark","isNonNegative","validate","readableObjectMode","decodeStrings","JSON","stringify","call","setNonEnumerableReadOnly","setNonEnumerable","Stream","streamFactory","inherit","prototype","chunk","clbk","splits","split","len","i","_idx","Buffer","_sep","_buffer","_index","push","_encoding","error","self","_destroyed","nextTick","emit","setReadOnly","main","factory"],"mappings":"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"}