{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/debug.js", "../lib/decode.js", "../lib/main.js", "../lib/object_mode.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"objectMode\": false,\n\t\"encoding\": null,\n\t\"allowHalfOpen\": false,\n\t\"writableObjectMode\": false,\n\t\"sep\": null\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNonNegative = require( '@stdlib/assert-is-nonnegative-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isRegExp = require( '@stdlib/assert-is-regexp' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(string|RegExp)} [options.sep] - separator used to split streamed data\n* @param {boolean} [options.objectMode] - specifies whether stream should operate in object mode\n* @param {(string|null)} [options.encoding] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode] - specifies whether the writable side should be in object mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '\\t',\n*     'objectMode': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif (\n\t\t\t!isString( opts.sep ) &&\n\t\t\t!isRegExp( opts.sep )\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be either a string or a regular expression. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'objectMode' ) ) {\n\t\topts.objectMode = options.objectMode;\n\t\tif ( !isBoolean( opts.objectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'objectMode', opts.objectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'writableObjectMode' ) ) {\n\t\topts.writableObjectMode = options.writableObjectMode;\n\t\tif ( !isBoolean( opts.writableObjectMode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'writableObjectMode', opts.writableObjectMode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isString( opts.encoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'allowHalfOpen' ) ) {\n\t\topts.allowHalfOpen = options.allowHalfOpen;\n\t\tif ( !isBoolean( opts.allowHalfOpen ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'allowHalfOpen', opts.allowHalfOpen ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'highWaterMark' ) ) {\n\t\topts.highWaterMark = options.highWaterMark;\n\t\tif ( !isNonNegative( opts.highWaterMark ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'highWaterMark', opts.highWaterMark ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// MAIN //\n\nvar debug = logger( 'split-stream' );\n\n\n// EXPORTS //\n\nmodule.exports = debug;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar string2buffer = require( '@stdlib/buffer-from-string' );\n\n\n// MAIN //\n\n/**\n* Re-decodes a UTF-8 string according to a specified encoding.\n*\n* @private\n* @param {string} str - UTF-8 string to decode\n* @param {string} enc - string encoding\n* @returns {string} decoded string\n*/\nfunction decode( str, enc ) {\n\t// Check if we need to re-decode the string to something other than 'utf8'...\n\tif ( enc === 'utf8' || enc === 'buffer' ) {\n\t\treturn str;\n\t}\n\tstr = string2buffer( str );\n\tif ( enc ) {\n\t\treturn str.toString( enc );\n\t}\n\treturn str.toString();\n}\n\n\n// EXPORTS //\n\nmodule.exports = decode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Transform = require( 'readable-stream' ).Transform;\nvar assign = require( '@stdlib/object-assign' );\nvar inherit = require( '@stdlib/utils-inherit' );\nvar setNonEnumerable = require( '@stdlib/utils-define-nonenumerable-property' );\nvar setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar Buffer = require( '@stdlib/buffer-ctor' );\nvar nextTick = require( '@stdlib/utils-next-tick' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar debug = require( './debug.js' );\nvar decode = require( './decode.js' );\n\n\n// VARIABLES //\n\nvar RE = /\\r?\\n/;\n\n\n// FUNCTIONS //\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @param {(Uint8Array|Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nfunction transform( chunk, encoding, clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar splits;\n\tvar split;\n\tvar len;\n\tvar i;\n\n\tthis._idx += 1;\n\tdebug( 'Received a new chunk. Chunk: %s. Encoding: %s. Index: %d.', chunk.toString(), encoding, this._idx );\n\tif ( encoding === 'buffer' ) {\n\t\t// Default Buffer decoding is 'utf8':\n\t\tchunk = chunk.toString();\n\t}\n\telse if ( encoding !== 'utf8' ) {\n\t\t// Decode the chunk as a 'utf8' string...\n\t\tchunk = new Buffer( chunk, encoding );\n\t\tchunk = chunk.toString( 'utf8' );\n\t}\n\t// Split the chunk:\n\tsplits = chunk.split( this._sep );\n\tdebug( 'Splits: %s. Index: %d.', JSON.stringify( splits ), this._idx );\n\n\t// How many splits do we have? We do not count the last \"split\", as it may be incomplete...\n\tlen = splits.length - 1;\n\tdebug( '%s splits. Index: %d.', len, this._idx );\n\n\t// If we do not have any splits, add the chunk to the buffer and wait for more data...\n\tif ( len === 0 ) {\n\t\tdebug( 'No splits. Index: %d.', this._idx );\n\t\tthis._buffer += splits[ len ];\n\t}\n\t// If we have split data, concat any previous partial split, re-decode (if need be) each split according to its original encoding, push each split to the destination, and set anything leftover as the new split buffer...\n\telse {\n\t\tdebug( 'Processing splits. Index: %d.', this._index );\n\t\tsplit = this._buffer + splits[ 0 ];\n\t\tsplit = decode( split, encoding );\n\n\t\tdebug( 'Split %d: %s. Index: %d.', 0, split.toString(), this._idx );\n\t\tthis.push( split, encoding );\n\t\tfor ( i = 1; i < len; i++ ) {\n\t\t\tsplit = decode( splits[ i ], encoding );\n\t\t\tdebug( 'Split %d: %s. Index: %d.', i, split.toString(), this._idx );\n\t\t\tthis.push( split, encoding );\n\t\t}\n\t\tdebug( 'Remaining split: %s.', splits[len].toString() );\n\t\tthis._buffer = splits[ len ];\n\t}\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nfunction flush( clbk ) {\n\t/* eslint-disable no-invalid-this */\n\tvar split = this._buffer;\n\tif ( split ) {\n\t\tdebug( 'Processing final split...' );\n\t\tsplit = decode( split, this._encoding );\n\t\tthis.push( split, this._encoding );\n\t}\n\tdebug( 'Flushing the stream...' );\n\tclbk();\n\n\t/* eslint-enable no-invalid-this */\n}\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @private\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nfunction destroy( error ) {\n\t/* eslint-disable no-invalid-this */\n\tvar self;\n\tif ( this._destroyed ) {\n\t\tdebug( 'Attempted to destroy an already destroyed stream.' );\n\t\treturn this;\n\t}\n\tself = this;\n\tthis._destroyed = true;\n\n\tnextTick( close );\n\n\treturn this;\n\n\t/**\n\t* Closes a stream.\n\t*\n\t* @private\n\t*/\n\tfunction close() {\n\t\tif ( error ) {\n\t\t\tdebug( 'Stream was destroyed due to an error. Error: %s.', JSON.stringify( error ) );\n\t\t\tself.emit( 'error', error );\n\t\t}\n\t\tdebug( 'Closing the stream...' );\n\t\tself.emit( 'close' );\n\t}\n\n\t/* eslint-enable no-invalid-this */\n}\n\n\n// MAIN //\n\n/**\n* Split stream constructor.\n*\n* @constructor\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = new SplitStream();\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n*/\nfunction SplitStream( options ) {\n\tvar opts;\n\tvar err;\n\tif ( !( this instanceof SplitStream ) ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn new SplitStream( options );\n\t\t}\n\t\treturn new SplitStream();\n\t}\n\topts = assign( {}, DEFAULTS );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// The stream's readable state should always be in object mode to prevent split data from being buffered (concatenated) and no longer being separated...\n\topts.readableObjectMode = true;\n\n\t// The stream converts each chunk into a string so no need to encode strings written to the split stream as Buffer objects:\n\topts.decodeStrings = false;\n\n\t// Make the stream a Transform stream:\n\tdebug( 'Creating a transform stream configured with the following options: %s.', JSON.stringify( opts ) );\n\tTransform.call( this, opts );\n\n\t// Cache the separator:\n\tsetNonEnumerableReadOnly( this, '_sep', ( opts.sep === null ) ? RE : opts.sep );\n\n\t// The destruction state:\n\tsetNonEnumerable( this, '_destroyed', false );\n\n\t// Cache the encoding:\n\tsetNonEnumerableReadOnly( this, '_encoding', opts.encoding );\n\n\t// Buffer for storing partial splits:\n\tsetNonEnumerable( this, '_buffer', '' );\n\n\t// Chunk counter:\n\tsetNonEnumerable( this, '_idx', -1 );\n\n\treturn this;\n}\n\n/*\n* Inherit from the `Transform` prototype.\n*/\ninherit( SplitStream, Transform );\n\n/**\n* Implements the `_transform` method.\n*\n* @private\n* @name _transform\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {(Buffer|string)} chunk - streamed chunk\n* @param {string} encoding - Buffer encoding\n* @param {Callback} clbk - callback to invoke after transforming the streamed chunk\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_transform', transform );\n\n/**\n* Implements the `_flush` method.\n*\n* @private\n* @name _flush\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Callback} clbk - callback to invoke after any final processing\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, '_flush', flush );\n\n/**\n* Gracefully destroys a stream, providing backward compatibility.\n*\n* @name destroy\n* @memberof SplitStream.prototype\n* @type {Function}\n* @param {Object} [error] - optional error message\n* @returns {SplitStream} Stream instance\n*/\nsetNonEnumerableReadOnly( SplitStream.prototype, 'destroy', destroy );\n\n\n// EXPORTS //\n\nmodule.exports = SplitStream;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\nvar assign = require( '@stdlib/object-assign' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a stream with `objectMode` set to `true`.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {SplitStream} split stream\n*\n* @example\n* var stream = objectMode({\n*     'sep': ','\n* });\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n*/\nfunction objectMode( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\topts.objectMode = true;\n\treturn new Stream( opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = objectMode;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\nvar assign = require( '@stdlib/object-assign' );\nvar Stream = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable stream factory.\n*\n* @param {Options} [options] - stream options\n* @param {(string|RegExp)} [options.sep=/\\r?\\n/] - separator used to split streamed data\n* @param {boolean} [options.objectMode=false] - specifies whether a stream should operate in object mode\n* @param {(string|null)} [options.encoding=null] - specifies how `Buffer` objects should be decoded to `strings`\n* @param {NonNegativeNumber} [options.highWaterMark] - specifies the `Buffer` level for when `write()` starts returning `false`\n* @param {boolean} [options.allowHalfOpen=false] - specifies whether the stream should remain open even if one side ends\n* @param {boolean} [options.writableObjectMode=false] - specifies whether the writable side should be in object mode\n* @throws {TypeError} options argument must be an object\n* @returns {Function} stream factory\n*\n* @example\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8'\n* };\n*\n* var factory = streamFactory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*/\nfunction streamFactory( options ) {\n\tvar opts;\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t} else {\n\t\topts = {};\n\t}\n\treturn splitStream;\n\n\t/**\n\t* Creates a transform stream for splitting streamed data.\n\t*\n\t* @private\n\t* @throws {TypeError} must provide valid options\n\t* @returns {SplitStream} split stream\n\t*/\n\tfunction splitStream() {\n\t\treturn new Stream( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = streamFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Transform stream which splits streamed data.\n*\n* @module @stdlib/streams-node-split\n*\n* @example\n* var stdout = require( '@stdlib/streams-node-stdout' );\n* var splitStream = require( '@stdlib/streams-node-split' );\n*\n* var stream = splitStream();\n*\n* stream.pipe( stdout );\n*\n* stream.write( '1\\n2\\n3' );\n* stream.end();\n* // => '1' => '2' => '3'\n*\n* @example\n* var splitStream = require( '@stdlib/streams-node-split' );\n*\n* var opts = {\n*     'sep': '\\t',\n*     'objectMode': true,\n*     'encoding': 'utf8',\n*     'highWaterMark': 64\n* };\n*\n* var factory = splitStream.factory( opts );\n*\n* // Create 10 identically configured streams...\n* var streams = [];\n* var i;\n* for ( i = 0; i < 10; i++ ) {\n*     streams.push( factory() );\n* }\n*\n* @example\n* var stdout = require( '@stdlib/streams-node-stdout' );\n* var splitStream = require( '@stdlib/streams-node-split' );\n*\n* var stream = splitStream.objectMode({\n*     'sep': ','\n* });\n*\n* stream.pipe( stdout );\n*\n* stream.write( 'a,b,c' );\n* stream.end();\n* // => 'a' => 'b' => 'c'\n*/\n\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar objectMode = require( './object_mode.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'objectMode', objectMode );\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isNonNegative", "isString", "isRegExp", "format", "validate", "opts", "options", "require_debug", "__commonJSMin", "exports", "module", "logger", "debug", "require_decode", "__commonJSMin", "exports", "module", "string2buffer", "decode", "str", "enc", "require_main", "__commonJSMin", "exports", "module", "Transform", "assign", "inherit", "setNonEnumerable", "setNonEnumerableReadOnly", "Buffer", "nextTick", "DEFAULTS", "validate", "debug", "decode", "RE", "transform", "chunk", "encoding", "clbk", "splits", "split", "len", "i", "flush", "destroy", "error", "self", "close", "SplitStream", "options", "opts", "err", "require_object_mode", "__commonJSMin", "exports", "module", "isObject", "format", "assign", "Stream", "objectMode", "options", "opts", "require_factory", "__commonJSMin", "exports", "module", "isObject", "format", "assign", "Stream", "streamFactory", "options", "opts", "splitStream", "setReadOnly", "main", "objectMode", "factory"]
}
